// protos/io/defang/v1/fabric.proto
syntax = "proto3";

option go_package = "github.com/DefangLabs/defang/src/protos/io/defang/v1";

package io.defang.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service FabricController {
  rpc GetStatus(google.protobuf.Empty) returns (Status) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }; // public
  rpc GetVersion(google.protobuf.Empty) returns (Version) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };                                               // public
  rpc Token(TokenRequest) returns (TokenResponse); // public

  rpc RevokeToken(google.protobuf.Empty) returns (google.protobuf.Empty);

  rpc Tail(TailRequest) returns (stream TailResponse);
  rpc Update(Service) returns (ServiceInfo) {
    option deprecated = true;
  }; // used by pulumi-defang provider; should use Deploy
  rpc Deploy(DeployRequest) returns (DeployResponse);
  rpc Get(ServiceID) returns (ServiceInfo) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }; // should be GetService
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option deprecated = true;
  }; // used by pulumi-defang provider; should use Deploy or Destroy
  rpc Destroy(DestroyRequest) returns (DestroyResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  rpc Publish(PublishRequest) returns (google.protobuf.Empty) {
    option deprecated = true;
  }
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);
  // rpc Promote(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc GetServices(GetServicesRequest) returns (ListServicesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }; // should be ListServices

  rpc GenerateFiles(GenerateFilesRequest) returns (
      GenerateFilesResponse); // deprecated; use StartGenerate/GenerateStatus
  rpc StartGenerate(GenerateFilesRequest) returns (StartGenerateResponse);
  rpc GenerateStatus(GenerateStatusRequest) returns (GenerateFilesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc Debug(DebugRequest) returns (DebugResponse);

  rpc SignEULA(google.protobuf.Empty)
      returns (google.protobuf.Empty); // AgreeToS
  rpc CheckToS(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // deprecate - change to use *Config functions
  rpc PutSecret(PutConfigRequest) returns (google.protobuf.Empty) {
    option deprecated = true;
  };
  rpc DeleteSecrets(Secrets) returns (google.protobuf.Empty) {
    option deprecated = true;
  };
  rpc ListSecrets(ListConfigsRequest) returns (Secrets) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option deprecated = true;
  } // no values

  rpc GetConfigs(GetConfigsRequest) returns (GetConfigsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }; // no values
  rpc PutConfig(PutConfigRequest) returns (google.protobuf.Empty) {
    option idempotency_level = IDEMPOTENT;
  };
  rpc DeleteConfigs(DeleteConfigsRequest) returns (google.protobuf.Empty) {
    option idempotency_level = IDEMPOTENT;
  }
  rpc ListConfigs(ListConfigsRequest) returns (ListConfigsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }; // no values

  rpc CreateUploadURL(UploadURLRequest) returns (UploadURLResponse);

  rpc DelegateSubdomainZone(DelegateSubdomainZoneRequest)
      returns (DelegateSubdomainZoneResponse);
  rpc DeleteSubdomainZone(google.protobuf.Empty)
      returns (google.protobuf.Empty);
  rpc GetDelegateSubdomainZone(google.protobuf.Empty)
      returns (DelegateSubdomainZoneResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc WhoAmI(google.protobuf.Empty) returns (WhoAmIResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc Track(TrackRequest) returns (google.protobuf.Empty);

  // Endpoint for GDPR compliance
  rpc DeleteMe(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option idempotency_level = IDEMPOTENT;
  }

  rpc VerifyDNSSetup(VerifyDNSSetupRequest) returns (google.protobuf.Empty) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message VerifyDNSSetupRequest {
  string domain = 1;
  repeated string targets = 2;
}

message DestroyRequest {
  string project = 1; // defaults to tenant ID
}

message DestroyResponse { string etag = 1; }

message DebugRequest {
  repeated File files = 1;
  string etag = 2;
  string project = 3;
  string logs = 4;
  repeated string services = 5;
}

message DebugResponse {
  string general = 1;
  repeated Issue issues = 2;
  repeated string requests = 3;
}

message Issue {
  string type = 1;
  string severity = 2;
  string details = 3;
  repeated CodeChange code_changes = 4;
}

message CodeChange {
  string file = 1;
  string change = 2;
}

message TrackRequest {
  string anon_id = 1;
  string event = 2;
  map<string, string> properties = 3;
  string os = 4;
  string arch = 5;
}

enum DeploymentMode {
  UNSPECIFIED_MODE = 0;
  DEVELOPMENT = 1;
  STAGING = 2;
  PRODUCTION = 3;
}

message DeployRequest {
  repeated Service services = 1
      [ deprecated = true ];                // deprecated; use compose
  string project = 2 [ deprecated = true ]; // deprecated; use compose.name
  DeploymentMode mode = 3;
  bytes compose = 4; // yaml (or json)
  string delegate_domain = 5;
  string delegation_set_id = 6;
}

message DeployResponse {
  repeated ServiceInfo services = 1;
  string etag = 2;
}

message DeleteRequest {
  repeated string names = 1;
  string project = 2; // defaults to tenant ID
  string delegate_domain = 3;
}

message DeleteResponse { string etag = 1; }

message GenerateFilesRequest {
  string prompt = 1;
  string language = 2;
  bool agree_tos = 3;
}

message File {
  string name = 1;
  string content = 2;
}

message GenerateFilesResponse { repeated File files = 1; }

message StartGenerateResponse { string uuid = 1; }

message GenerateStatusRequest { string uuid = 1; }

message UploadURLRequest { 
  string digest = 1;
  string project = 2;
}

message UploadURLResponse { string url = 1; }

enum ServiceState {
  NOT_SPECIFIED = 0;

  // Build states
  BUILD_QUEUED = 1; // initial state for build
  BUILD_PROVISIONING = 2;
  BUILD_PENDING = 3;
  BUILD_ACTIVATING = 4;
  BUILD_RUNNING = 5;
  BUILD_STOPPING = 6;

  UPDATE_QUEUED = 7; // initial state for existing image

  // Deployment states
  DEPLOYMENT_PENDING = 8;
  DEPLOYMENT_COMPLETED = 9;
  DEPLOYMENT_FAILED = 10;

  BUILD_FAILED = 11;
}

message ServiceInfo {
  Service service = 1;
  repeated string endpoints = 2; // list of endpoints, one for each port
  string project = 3;            // was: tenant; defaults to tenant ID
  string etag = 4;
  string status = 5;
  repeated string nat_ips = 6; // comma-separated list of NAT IPs
  repeated string lb_ips =
      7; // comma-separated list of internal CIDRs for the load-balancer
  string private_fqdn = 8; // fully qualified domain name (host)
  string public_fqdn = 9;  // fully qualified domain name (ingress)
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  string zone_id = 12; // zone ID for byod domain
  bool use_acme_cert =
      13; // If we should setup the facilities to use ACME(let's encrypt) certs
  reserved 14;             // was: string lb_dns
  ServiceState state = 15; // enumerated status of the service
  string domainname = 16;  // domain name for the service

  // bool is_function = 5; // true if service is a function
}

message Secrets {
  option deprecated = true;
  repeated string names = 1;
  string project = 2; // defaults to tenant ID
}

message SecretValue {
  option deprecated = true;
  string name = 1;
  string value = 2;
  string project = 3; // defaults to tenant ID
}

enum ConfigType {
  CONFIGTYPE_UNSPECIFIED = 0;
  CONFIGTYPE_SENSITIVE = 1;
}

message Config {
  string name = 1;
  string value = 2;
  string project = 3;
  ConfigType type = 4;
}

message ConfigKey {
  string name = 1;
  string project = 2; // defaults to tenant ID
}

message PutConfigRequest {
  string name = 1;
  string value = 2;
  string project = 3;
  ConfigType type = 4;
}

message GetConfigsRequest { repeated ConfigKey configs = 1; }

message GetConfigsResponse { repeated Config configs = 1; }

message DeleteConfigsRequest { repeated ConfigKey configs = 1; }

message ListConfigsRequest {
  string project = 1; // defaults to tenant ID
}

message ListConfigsResponse { repeated ConfigKey configs = 1; }

message TokenRequest {
  string tenant = 1;
  string auth_code = 2;      // from GitHub authorization code flow
  repeated string scope = 3; // "tail", "read", etc.
  string assertion = 4;      // jwt-bearer
  uint32 expires_in = 5;     // seconds
  string anon_id = 6;
  string refresh_token = 7;
}

message TokenResponse {
  string access_token = 1; // short-lived token
  string refresh_token = 2;
  // string token_type = 3; // "Bearer"
  // uint32 expires_in = 4; // 3600
  // string id_token = 5; // "eyJhbGciOiJSUzIâ€¦"
}

message Status { string version = 1; }

message Version {
  string fabric = 1;
  reserved 2;            // was "nats"
  string cli_min = 3;    // minimum CLI version
  string pulumi_min = 4; // minimum Pulumi provider version
}

message TailRequest {
  repeated string services = 1;
  google.protobuf.Timestamp since = 2;
  string etag = 3;
  string project = 4;
}

message LogEntry {
  string message = 1;
  google.protobuf.Timestamp timestamp = 2;
  bool stderr = 3;
  string service = 4;
  string etag = 5;
  string host = 6;
}

message TailResponse {
  reserved 1; // was "string raw"
  repeated LogEntry entries = 2;
  string service = 3;
  string etag = 4;
  string host = 5;
}

message ListServicesResponse {
  repeated ServiceInfo services = 1;
  string project = 2;
}

message ProjectUpdate {
  repeated ServiceInfo services = 1;
  string alb_arn = 2;
  string project = 3 [deprecated = true]; // deprecated; use compose.name
  bytes compose = 4;
  string cd_version = 5;
}

enum Platform {
  option deprecated = true;
  LINUX_AMD64 = 0;
  LINUX_ARM64 = 1;
  LINUX_ANY = 2;
}

message ServiceID { 
  string name = 1; 
  string project = 2;
}

message Device {
  option deprecated = true;
  repeated string capabilities = 1; // "gpu", "tpu", etc.
  string driver = 2;                // "nvidia", "amd", etc.
  uint32 count = 3;                 // number of devices to reserve
}

message Resource {
  option deprecated = true;
  float memory = 1;            // in MiB
  float cpus = 2;              // fractional vCPUs
  repeated Device devices = 3; // devices & capabilities
}

message Resources {
  option deprecated = true;
  Resource reservations = 1; // requested resources

  // Resource limits = 2; // hard limits
}

message Deploy {
  option deprecated = true;
  uint32 replicas = 1;     // number of initial replicas
  Resources resources = 2; // reservations and limits

  // Placement placement = 3;
  // EndpointMode endpoint_mode
  // Mode mode
}

// message Range {
//   uint32 from = 1;
//   uint32 to = 2;
// }

enum Protocol {
  option deprecated = true;
  ANY = 0; // unspecified means any protocol
  UDP = 1;
  TCP = 2;
  HTTP = 3;
  HTTP2 = 4;
  GRPC = 5; // HTTP/2 with gRPC health checks
}

enum Mode {
  option deprecated = true;
  HOST = 0;    // no load-balancer; suitable for internal services and functions
  INGRESS = 1; // with load-balancer; suitable for public services
}

message Port {
  option deprecated = true;
  uint32 target = 1;
  Protocol protocol = 2;
  Mode mode = 3; // load-balanced (ingress) or not (host)

  // string host_ip "127.0.0.1"
  // Range published "8080"
}

message Secret {
  option deprecated = true;
  string source = 1; // name of the secret
  // string target = 2;
}

message Build {
  option deprecated = true;
  string context = 1;           // path or URL to the build context
  string dockerfile = 2;        // path to the Dockerfile
  map<string, string> args = 3; // build-time variables
  float shm_size = 4;           // in MiB
  string target = 5;
}

message HealthCheck {
  option deprecated = true;
  repeated string test = 1;
  uint32 interval = 2; // in seconds
  uint32 timeout = 3;  // in seconds; must be less than interval
  uint32 retries = 4;
}

enum Network {
  option deprecated = true;
  UNSPECIFIED = 0; // was: internal=false
  PRIVATE = 1;     // was: internal=true
  PUBLIC = 2;
}

message Service {
  option deprecated = true;
  string name = 1;
  string image = 2;
  Platform platform = 3;
  bool internal = 4 [ deprecated = true ]; // deprecated: use networks
  Deploy deploy = 5;
  repeated Port ports = 6;
  map<string, string> environment = 7;
  Build build = 8;
  repeated Secret secrets = 9; // FIXME: these are actually env vars
  HealthCheck healthcheck = 10;
  repeated string command = 11;
  string domainname = 12;
  bool init = 13;
  string dns_role = 14; // x-defang-dns-role: role arn used to access route53 to
                        // create dns records
  StaticFiles static_files = 15; // x-defang-static-files: use a managed CDN
  Network networks = 16;         // currently only 1 network is supported
  Redis redis = 18;              // x-defang-redis: use a managed redis
  Postgres postgres = 19;        // x-defang-postgres: use a managed
  string project = 20;           // defaults to tenant ID
}

message StaticFiles {
  option deprecated = true;
  string folder = 1;
  repeated string redirects = 2;
}

message Redis { option deprecated = true; }
message Postgres { option deprecated = true; }

// TODO: internal message; move to a separate proto file; was Event
message DeployEvent {
  DeploymentMode mode = 1;
  string type = 2; // required
  string source = 3;
  string id = 4; // etag
  string datacontenttype = 5;
  string dataschema = 6;
  string subject = 7; // tenant|stack; also used as SQS group ID
  google.protobuf.Timestamp time = 8;
  bytes data = 9;
}

message Event {
  option deprecated = true;
  string specversion = 1; // required (but we don't care)
  string type = 2;        // required
  string source = 3;      // required
  string id = 4;          // required
  string datacontenttype = 5;
  string dataschema = 6;
  string subject = 7;
  google.protobuf.Timestamp time = 8;
  bytes data = 9;
}

message PublishRequest { Event event = 1; }

message SubscribeRequest {
  repeated string services = 1;
  string etag = 2;
  string project = 3;
}

message SubscribeResponse {
  ServiceInfo service = 1 [ deprecated = true ];
  string name = 2;
  string status = 3;
  ServiceState state = 4;
}

message GetServicesRequest {
  string project = 1;
}

message DelegateSubdomainZoneRequest {
  repeated string name_server_records = 1;
}

message DelegateSubdomainZoneResponse { string zone = 1; }

message WhoAmIResponse {
  string tenant = 1;
  string account = 2;
  string region = 3;
  string user_id = 4;
}
