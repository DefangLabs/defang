// protos/v1/fabric.proto
syntax = "proto3";

option go_package = "github.com/DefangLabs/defang/src/protos/io/defang/v1";
// option java_multiple_files = true;
// option java_package = "io.defang.fabric";
// option java_outer_classname = "FabricProto";

package io.defang.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service FabricController {
  rpc GetStatus(google.protobuf.Empty) returns (Status) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }; // public
  rpc GetVersion(google.protobuf.Empty) returns (Version) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };                                               // public
  rpc Token(TokenRequest) returns (TokenResponse); // public

  rpc RevokeToken(google.protobuf.Empty) returns (google.protobuf.Empty);

  rpc Tail(TailRequest) returns (stream TailResponse);
  rpc Update(Service) returns (ServiceInfo); // deprecated; use Deploy
  rpc Deploy(DeployRequest) returns (DeployResponse);
  rpc Get(ServiceID) returns (ServiceInfo) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };                                                  // should be GetService
  rpc Delete(DeleteRequest) returns (DeleteResponse); // deprecated; use Deploy
  rpc Publish(PublishRequest) returns (google.protobuf.Empty);
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);
  // rpc Promote(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc GetServices(google.protobuf.Empty) returns (ListServicesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }; // should be ListServices

  rpc GenerateFiles(GenerateFilesRequest) returns (
      GenerateFilesResponse); // deprecated; use StartGenerate/GenerateStatus
  rpc StartGenerate(GenerateFilesRequest) returns (StartGenerateResponse);
  rpc GenerateStatus(GenerateStatusRequest) returns (GenerateFilesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc SignEULA(google.protobuf.Empty)
      returns (google.protobuf.Empty); // AgreeToS
  rpc CheckToS(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc PutSecret(SecretValue) returns (google.protobuf.Empty);
  rpc DeleteSecrets(Secrets) returns (google.protobuf.Empty);
  rpc ListSecrets(google.protobuf.Empty) returns (Secrets) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }; // no values
  rpc CreateUploadURL(UploadURLRequest) returns (UploadURLResponse);

  rpc DelegateSubdomainZone(DelegateSubdomainZoneRequest)
      returns (DelegateSubdomainZoneResponse);
  rpc DeleteSubdomainZone(google.protobuf.Empty)
      returns (google.protobuf.Empty);
  rpc GetDelegateSubdomainZone(google.protobuf.Empty)
      returns (DelegateSubdomainZoneResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc WhoAmI(google.protobuf.Empty) returns (WhoAmIResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
  rpc Track(TrackRequest) returns (google.protobuf.Empty);
}

message TrackRequest {
  string anon_id = 1;
  string event = 2;
  map<string, string> properties = 3;
  string os = 4;
  string arch = 5;
}

message DeployRequest {
  repeated Service services = 1;
  string project = 2;
}

message DeployResponse {
  repeated ServiceInfo services = 1;
  string etag = 2;
}

message DeleteRequest {
  repeated string names = 1;

  // string project = 2; // defaults to tenant ID
}

message DeleteResponse { string etag = 1; }

message GenerateFilesRequest {
  string prompt = 1;
  string language = 2;
  bool agree_tos = 3;
}

message File {
  string name = 1;
  string content = 2;
}

message GenerateFilesResponse { repeated File files = 1; }

message StartGenerateResponse { string uuid = 1; }

message GenerateStatusRequest { string uuid = 1; }

message UploadURLRequest { string digest = 1; }

message UploadURLResponse { string url = 1; }


enum ServiceState {
  UNKNOWN = 0;

  // Build states (initial state for build)
  BUILD_PENDING = 1; // BUILD_QUEUED -> BUILD_ACTIVATING
  BUILDING = 2; // BUILD_RUNNING
  CREATED = 3; // BUILD_DEACTIVATING (done = true)
 
  // Update states (initial state for existing image)
  UPDATE_PENDING = 4; //  UPDATE_QUEUE

  // Deployment states
  DEPLOYING = 5;
  STARTED = 6;
  FAILED = 7;
}

message ServiceInfo {
  Service service = 1;
  repeated string endpoints = 2; // list of endpoints, one for each port
  string project = 3;            // was: tenant; defaults to tenant ID
  string etag = 4;
  string status = 5;
  repeated string nat_ips = 6; // comma-separated list of NAT IPs
  repeated string lb_ips = 7; // comma-separated list of internal CIDR for the load-balancer
  string private_fqdn = 8; // fully qualified domain name (host)
  string public_fqdn = 9;  // fully qualified domain name (ingress)
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  string zone_id = 12; // zone ID for byod domain
  bool use_acme_cert = 13; // If we should setup the facilities to use ACME(let's encrypt) certs
  reserved 14; // was: string lb_dns
  ServiceState state = 15; // enumerated status of the service

  // bool is_function = 5; // true if service is a function
}

// message Project {
//   repeated Service services = 1;
//   repeated SecretValue secrets = 2;
// }

message Secrets {
  repeated string names = 1;
  string project = 2; // defaults to tenant ID
}

message SecretValue {
  string name = 1;
  string value = 2;
  string project = 3; // defaults to tenant ID
}

message TokenRequest {
  string tenant = 1;
  string auth_code = 2;      // from GitHub authorization code flow
  repeated string scope = 3; // "tail", "read", etc.
  string assertion = 4;      // jwt-bearer
  uint32 expires_in = 5;     // seconds
  string anon_id = 6;

  // string refresh_token = 6;
}

message TokenResponse {
  string access_token = 1; // our JWT

  // string refresh_token = 2;
  // string token_type = 3; // "Bearer"
  // uint32 expires_in = 4; // 3600
  // string id_token = 5; // "eyJhbGciOiJSUzIâ€¦"
}

message Status { string version = 1; }

message Version {
  string fabric = 1;
  reserved 2;            // was "nats"
  string cli_min = 3;    // minimum CLI version
  string pulumi_min = 4; // minimum Pulumi provider version
}

message TailRequest {
  repeated string services = 1;
  google.protobuf.Timestamp since = 2;
  string etag = 3;
}

message LogEntry {
  string message = 1;
  google.protobuf.Timestamp timestamp = 2;
  bool stderr = 3;
  string service = 4;
  string etag = 5;
  string host = 6;
}

message TailResponse {
  reserved 1; // was "string raw"
  repeated LogEntry entries = 2;
  string service = 3;
  string etag = 4;
  string host = 5;
}

message ListServicesResponse {
  repeated ServiceInfo services = 1;
  string project = 2;
}

// TODO: internal message; move to a separate proto file
message ProjectUpdate {
  repeated ServiceInfo services = 1;
  string alb_arn = 2;
}

enum Platform {
  LINUX_AMD64 = 0;
  LINUX_ARM64 = 1;
  LINUX_ANY = 2;
}

message ServiceID { string name = 1; }

message Device {
  repeated string capabilities = 1; // "gpu", "tpu", etc.
  string driver = 2;                // "nvidia", "amd", etc.
  uint32 count = 3;                 // number of devices to reserve

  // repeated string device_ids = 4; // device IDs to reserve
  // map<string, string> options = 5;
}

/* placement specifies constraints and preferences for platform to select a
 * physical node to run service containers. */
// message Placement {
//   /* constraints defines a REQUIRED property the platform's node MUST fulfill
//   to run service container. */ map<string, string> constraints = 1;
//   /* preferences defines a property the platform's node SHOULD fulfill to run
//   service container. */ map<string, string> preferences = 2;
// }

message Resource {
  float memory = 1;            // in MiB
  float cpus = 2;              // fractional vCPUs
  repeated Device devices = 3; // devices & capabilities
}

message Resources {
  Resource reservations = 1; // requested resources

  // Resource limits = 2; // hard limits
}

message Deploy {
  uint32 replicas = 1;     // number of initial replicas
  Resources resources = 2; // reservations and limits

  // Placement placement = 3;
  // EndpointMode endpoint_mode
  // Mode mode
}

// message Range {
//   uint32 from = 1;
//   uint32 to = 2;
// }

enum Protocol {
  ANY = 0; // unspecified means any protocol
  UDP = 1;
  TCP = 2;
  HTTP = 3;
  HTTP2 = 4;
  GRPC = 5; // HTTP/2 with gRPC health checks
}

enum Mode {
  HOST = 0;    // no load-balancer; suitable for internal services and functions
  INGRESS = 1; // with load-balancer; suitable for public services
}

message Port {
  uint32 target = 1;
  Protocol protocol = 2;
  Mode mode = 3; // load-balanced (ingress) or not (host)

  // string host_ip "127.0.0.1"
  // Range published "8080"
}

message Secret {
  string source = 1; // name of the secret
  // string target = 2;
}

message Build {
  string context = 1;           // path or URL to the build context
  string dockerfile = 2;        // path to the Dockerfile
  map<string, string> args = 3; // build-time variables
  float shm_size = 4;           // in MiB
  string target = 5;

  // string dockerfile_inline = 4; // inline Dockerfile
  // repeated string ssh = 4;
  // repeated string cache_from = 4;
  // repeated string cache_to = 4;
  // repeated string extra_hosts = 4;
  // string isolation = 4;
  // bool privileged = 4;
  // map<string, string> labels = 4;
  // bool no_cache = 4;
  // bool pull = 4;
  // repeated Secret secrets = 4;
  // repeated string tags = 4;
  // repeated Platform platforms = 4;
}

message HealthCheck {
  repeated string test = 1;
  uint32 interval = 2; // in seconds
  uint32 timeout = 3;  // in seconds; must be less than interval
  uint32 retries = 4;

  // uint32 start_period = 5;
  // uint32 start_interval = 5; not supported by ECS
  // bool disable = 6;
}

enum Network {
  UNSPECIFIED = 0; // was: internal=false
  PRIVATE = 1;     // was: internal=true
  PUBLIC = 2;
}

message Service {
  string name = 1;
  string image = 2;
  Platform platform = 3;
  bool internal = 4; // deprecated: use networks
  Deploy deploy = 5;
  repeated Port ports = 6;
  map<string, string> environment = 7;
  Build build = 8;
  repeated Secret secrets = 9; // FIXME: these are actually env vars
  HealthCheck healthcheck = 10;
  repeated string command = 11;
  string domainname = 12;
  bool init = 13;
  string dns_role = 14; // x-defang-dns-role: role arn used to access route53 to create dns records
  StaticFiles static_files = 15; // x-defang-static-files: use a managed CDN
  Network networks = 16;         // currently only 1 network is supported
  Redis redis = 18; // x-defang-redis: use a managed redis
}

message StaticFiles {
  string folder = 1;
  repeated string redirects = 2;
}

message Redis {}

message Event {
  string specversion = 1; // required (but we don't care)
  string type = 2;        // required
  string source = 3;      // required
  string id = 4;          // required
  string datacontenttype = 5;
  string dataschema = 6;
  string subject = 7;
  google.protobuf.Timestamp time = 8;
  bytes data = 9;
}

message PublishRequest { Event event = 1; }

message SubscribeRequest { 
  repeated string services = 1;
}

message SubscribeResponse { ServiceInfo service = 1; }

message DelegateSubdomainZoneRequest {
  repeated string name_server_records = 1;
}

message DelegateSubdomainZoneResponse { string zone = 1; }

message WhoAmIResponse {
  string tenant = 1;
  string account = 2;
  string region = 3;
  string user_id = 4;
}
